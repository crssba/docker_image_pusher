name: Docker

on:
  workflow_dispatch: 
  push:
    branches: [ new ]
  schedule:
    - cron: '00 19 * * *'  



env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        # 定义 Gotify 推送函数
        notify_gotify() {
          title=$1
          msg=$2
          curl -s -X POST "https://ysewsxzmhzws.us-east-1.clawcloudrun.com/message" \
            -H "X-Gotify-Key: Ay5FFfMz0q6Z4yU" \
            -H "Content-Type: application/json" \
            -d "{\"title\":\"$title\",\"message\":\"$msg\",\"priority\":5}"
        }

        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then continue; fi
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            name_space="${name_space}_"
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            if [[ -n "${temp_map[$image_name]}" ]]; then
                if [[ "${temp_map[$image_name]}" != $name_space ]]; then
                    duplicate_images[$image_name]="true"
                fi
            else
                temp_map[$image_name]=$name_space
            fi
        done < images.txt

        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then continue; fi

            echo "docker pull $line"
            if ! docker pull $line; then
              notify_gotify "❌ 镜像拉取失败" "镜像: $line 拉取失败，任务中断"
              exit 1
            fi

            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_"
            fi

            image=$(echo "$line" | awk '{print $NF}')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi

            image_name_tag="${image_name_tag%%@*}"
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"

            echo "docker tag $image $new_image"
            if ! docker tag $image $new_image; then
              notify_gotify "❌ 镜像打标签失败" "镜像: $image -> $new_image 失败"
              exit 1
            fi

            echo "docker push $new_image"
            if ! docker push $new_image; then
              notify_gotify "❌ 镜像推送失败" "镜像: $new_image 推送失败"
              exit 1
            fi

            # 获取 IMAGE ID, CREATED, SIZE
            image_info=$(docker images --format "{{.ID}} {{.CreatedSince}} {{.Size}}" "$new_image" | head -n 1)
            image_id=$(echo "$image_info" | awk '{print $1}')
            image_created=$(echo "$image_info" | awk '{print $2" "$3}')
            image_size=$(echo "$image_info" | awk '{print $4}')

            notify_gotify "✅ 镜像推送成功" "镜像: $new_image\nID: $image_id\n创建时间: $image_created\n大小: $image_size"

            echo "清理镜像空间"
            docker rmi $image || true
            docker rmi $new_image || true

        done < images.txt

        notify_gotify "✅ 镜像同步完成" "images.txt 中所有镜像处理流程已结束"
